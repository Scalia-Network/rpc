openapi: 3.0.3
info:
  title: Swagger Scalia RPC
  description: >-
    This is the main Scalia RPC document. It contains all communications with
    Scalia nodes.


    This version support general and SNS protocols only.
  termsOfService: https://t.me/
  contact:
    url: https://t.me/scaliadepin
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 0.0.3
externalDocs:
  description: Find out more about Scalia
  url: https://scalia.gitbook.io/
tags:
  - name: general
    description: All not protocol-specific calls
  - name: sns
    description: Scalia Naming System calls
  - name: finance
    description: The finance operations
paths:
  /general:
    get:
      summary: Get the node information
      tags:
        - general
      description: >-
        Returns the public key and another public information of the node.
      operationId: generalGetPk
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodeInfo'
        '503':
          description: Node is not available now
        '523':
          description: Node is not connected to the network 
  /general/nodes:
    get:
      summary: Get the nearest nodes list
      tags:
        - general
      description: >-
        Returns the list of nearest accessible nodes for the client. Client should
        to choose the one of the nodes to further interaction.
      operationId: generalGetNodes
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                example: ["133.1.2.3", "240.7.6.88", "75.148.55.223"]
        '503': 
          description: Node is not available now
        '523':
          description: Node is not connected to the network 
  /general/transactions:
    get:
      summary: Get the transactions list
      tags:
        - general
      description: Return the information of the transactions by the order
      operationId: generalGetTransactions
      parameters:
        - name: from
          in: query
          description: The number of the transaction to start from
          required: true
          schema:
            type: number
        - name: limit
          in: query
          description: The amount of the requested transactions. Default amount is 20 items
          required: false
          schema:
            type: number
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TransactionInfo'
        '503':
          description: Node is not available now
        '523':
          description: Node is not connected to the network
  /general/transaction/{transactionId}:
    get:
      summary: Get the transaction information
      tags:
        - general
      description: Return the information of the transaction by id
      operationId: generalGetTransaction
      parameters:
        - name: transactionId
          in: path
          description: The name of the domain
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionInfo'
        '503':
          description: Node is not available now
        '523':
          description: Node is not connected to the network
  /sns:
    get:
      tags:
        - sns
      summary: Get the SNS properties
      description: Returns the properties of the node SNS 
      operationId: snsGetInfo
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SNSInfo'
        '405':
          description: SNS not supported
        '503':
          description: Node is not available now
        '523':
          description: Node is not connected to the network
    put:
      tags:
        - sns
      summary: Update an existing domain
      description: The only one possible update for the domain is the transfer to another owner
      operationId: snsUpdateDomain
      requestBody:
        description: Update an existent domain owner
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DomainTransfer'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Transaction'
        '401':
          description: Invalid schema signature provided
        '405':
          description: SNS not supported
        '503':
          description: Node is not available now
        '523':
          description: Node is not connected to the network 
    post:
      tags:
        - sns
      summary: Add a new domain
      description: Add a new domain for the current user
      operationId: snsAddDomain
      requestBody:
        description: Create a new domain 
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DomainOrder'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Transaction'
        '401':
          description: Invalid schema signature provided
        '405':
          description: SNS not supported
        '503':
          description: Node is not available now
        '523':
          description: Node is not connected to the network
  /sns/{domainName}:
    get:
      tags:
        - sns
      summary: Get the current domain record for master domains and subdomains
      description: Returns the NS record, according to the subdomain of the domain, supported by SNS
      operationId: snsGetDomain
      parameters:
        - name: domainName
          in: path
          description: The name of the domain
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DomainNSRecord'
        '405':
          description: SNS not supported
        '503':
          description: Node is not available now
        '523':
          description: Node is not connected to the network
  /sns/{domainName}/list:
    get:
      tags:
        - sns
      summary: Get the list of the domain records (only for master domains)
      description: Returns the list of the NS records, supported by SNS
      operationId: snsGetDomainNS
      parameters:
        - name: domainName
          in: path
          description: The name of the domain
          required: true
          schema:
            type: string      
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Domain'
        '405':
          description: SNS not supported
        '503':
          description: Node is not available now
        '523':
          description: Node is not connected to the network
  /finance:
    get:
      tags:
        - finance
      summary: Get the finance properties
      description: Returns the properties of the node finance part 
      operationId: financeGetInfo
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FinanceInfo'
        '405':
          description: Finances not supported
        '503':
          description: Node is not available now
        '523':
          description: Node is not connected to the network
    post:
      tags:
        - finance
      summary: Make a transfer
      description: Sending of the funds to the another wallet 
      operationId: financeSendFunds
      requestBody:
        description: Funds transfer
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FundsTransfer'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Transaction'
        '401':
          description: Invalid schema signature provided
        '405':
          description: Finances not supported
        '503':
          description: Node is not available now
        '523':
          description: Node is not connected to the network
  /finance/{address}:
    get:
      tags:
        - finance
      summary: Get the address finances
      description: Returns the finance statement for the address
      operationId: financeGetAddressInfo
      parameters:
        - name: address
          in: path
          description: The address of the wallet
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FinanceWalletInfo'
        '405':
          description: SNS not supported
        '503':
          description: Node is not available now
        '523':
          description: Node is not connected to the network

components:
  schemas:
    Transaction:
      type: object
      properties:
        transaction:
          type: string
          example: "STJKTDEFGUTGGhghGSU^R%56tstfyttrd4"
          description: The id of the transaction (should start from "ST")
        status:
          type: string
          description: The transaction status
          enum:
            - awaiting
            - pending
            - processing
            - signed
            - underpriced
            - conflicted
            - confirmed
    TransactionInfo:
      type: object
      properties:
        transaction:
          type: string
          example: "STJKTDEFGUTGGhghGSU^R%56tstfyttrd4"
          description: The id of the transaction (should start from "ST")
        status:
          type: string
          description: The transaction status
          enum:
            - awaiting
            - pending
            - processing
            - signed
            - underpriced
            - conflicted
            - confirmed
        data: 
          type: object
          description: The JSON of the specific transaction data
    NodeInfo:
      type: object
      properties:
        address:
          type: string
          example: "SNJKTDEFGUTGGhghGSU^R%56tstfyttrd4"
          description: The address of the current node (should start from "SN")
        version:
          type: string
          example: "0.0.1"
          description: The node version. Supported protocols list is defined by the version
        lastTransaction:
          type: number
          example: 324537
          description: Last processed transaction in the node. The number of the transaction in the different nodes may vary.
        protocols:
          type: array
          items:
            type: string
          example: ["dht", "sns", "storage"]
          description: The list of the protocols supported by the current node. Node may support only a part of the all network protocols.
    SNSInfo:
      type: object
      properties:
        version:
          type: string
          example: "0.0.1"
          description: The node SNS protocol version.
    DomainTransfer:
      type: object
      properties:
        address:
          type: string
          example: "SCGydedy8768tygIUY"
          description: The address of the current domain owner (should start from "SW")
        data:
          type: string
          example: "The encrypted message of the domain transfer request"
          description: |
            The encrypted JSON of the request. This data is encrypted by asymmetric encryption using the private key of the client and the public key of the node.

            JSON: {

                domain: The domain name,

                address: The new owner address (should start from "SW"),

                price: The price for the domain transfer. Defines the amount of the Scalia tokens needed to be taken from the new owner,

                timestamp: The execution timestamp. Should be no more than 1 minute before of the request

            }
    DomainOrder:
      type: object
      properties:
        address:
          type: string
          example: "SCGydedy8768tygIUY"
          description: The address of the domain buyer (should start from "SW")
        data:
          type: string
          example: "The encrypted message of the domain request"
          description: |
            The encrypted JSON of the request. This data is encrypted by asymmetric encryption using the private key of the client and the public key of the node.

            JSON: {

                domain: The domain name,

                address: The new owner address (should start from "SW"). May not the same as the buyer.

                price: The price for the domain name order. Defines the amount of the Scalia tokens needed to be paid by buyer. The domain name to be purchased is placed in an internal closed-type auction, and awaits the maximum bid within twenty-four hours of the bid. The owner of the domain becomes the applicant of the maximum amount, but not less than a fixed value (defined in a separate document).

                timestamp: The execution timestamp. Should be no more than 1 minute before of the request

            }
    DomainNSRecord:
      type: object
      properties:
        name:
          type: string
          description: The name of the subdomain (or @ for root)
          example: "www"
        target:
          type: string
          example: "ipfs:/blablabla....."
          description: The target of the subdomain. May be Scalia address (storage, client or something else), IPFS address or IP address.
    Domain:
      type: object
      properties:
        name:
          type: string
          example: "mydomain.scalia"
          description: The name of the domain
        expired:
          type: string
          format: date-time
          description: The expiration of the domain
        records:
          type: array
          items:
            $ref: '#/components/schemas/DomainNSRecord'
          description: The list of the NS records.
    FinanceInfo:
      type: object
      properties:
        version:
          type: string
          example: "0.0.1"
          description: The node SNS protocol version.
    FinanceWalletInfo:
      type: object
      properties:
        address:
          type: string
          example: "SCGydedy8768tygIUY"
          description: The address of the requesting person (should start from "SW")
        funds:
          type: array
          items:
            $ref: '#/components/schemas/WalletInfo'
    WalletInfo:
      type: object
      properties:
        address:
          type: string
          example: "SFGydedy8768tygIUY"
          description: The address of the token (starting from the "SF")
        amount: 
          type: number
          example: 7864.7686
          description: The amount of the holded tokens.
    FundsTransfer:
      type: object
      properties:
        address:
          type: string
          example: "SCGydedy8768tygIUY"
          description: The address of the transferring person (should start from "SW")
        data:
          type: string
          example: "The encrypted message of the domain request"
          description: |
            The encrypted JSON of the request. This data is encrypted by asymmetric encryption using the private key of the client and the public key of the node.

            JSON: {
                address: The funds receiving address (should start from "SW" or "SC"). 

                amount: The amount of the transferred tokens.

                token: The address of the token (Should start from "SF", Scalia native toke have the short "SF" address, Scalia's subtokens have the "SFXX" addresses, where XX is the id of the subtoken.)

                timestamp: The execution timestamp. Should be no more than 1 minute before of the request

            }